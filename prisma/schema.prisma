generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int       @id @default(autoincrement())
  name      String?   @db.VarChar(255)
  email     String    @unique @db.VarChar(255)
  image     String?   @db.VarChar(500)
  provider  Provider? @default(google)
  role      Role      @default(user)
  status    Status    @default(active)
  createdAt DateTime  @default(now()) @map("created_at")

  // Relationship
  userWords UserWord[]

  @@map("users")
}

model Word {
  id        Int      @id @default(autoincrement())
  word      String   @unique @db.VarChar(100)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  // Relationship
  meanings  WordMeaning[]
  userWords UserWord[]

  @@map("words")
  @@index([word])
}

model WordMeaning {
  id           Int      @id @default(autoincrement())
  wordId       Int      @map("word_id")
  definition   String   @db.Text
  vnDefinition String   @db.Text @map("vn_definition")
  partOfSpeech String?  @db.VarChar(50) @map("part_of_speech")
  examples     Json?    @db.Json
  createdAt    DateTime @default(now()) @map("created_at")
  cefrLevel    String?  @db.VarChar(10) @map("cefr_level")
  ukIpa        String?  @db.VarChar(100) @map("uk_ipa")
  usIpa        String?  @db.VarChar(100) @map("us_ipa")
  ukAudioUrl   String?  @db.VarChar(500) @map("uk_audio_url")
  usAudioUrl   String?  @db.VarChar(500) @map("us_audio_url")

  // Relationship
  word      Word       @relation(fields: [wordId], references: [id], onDelete: Cascade)
  userWords UserWord[]

  @@map("word_meanings")
  @@index([wordId], map: "idx_word_id")
  @@index([partOfSpeech], map: "idx_part_of_speech")
}

model UserWord {
  id              Int            @id @default(autoincrement())
  userId          Int               @map("user_id")
  wordId          Int               @map("word_id")
  wordMeaningId   Int               @map("word_meaning_id")
  status          LearningStatus    @default(new)
  addedAt         DateTime          @default(now()) @map("added_at")
  lastReviewedAt  DateTime?         @map("last_reviewed_at")
  nextReviewAt    DateTime?         @map("next_review_at")
  totalReviews    Int               @default(0) @map("total_reviews")
  correctCount    Int               @default(0) @map("correct_count")
  currentStreak   Int               @default(0) @map("current_streak")
  easeFactor      Decimal           @default(2.50) @db.Decimal(4, 2) @map("ease_factor")
  intervalDays    Int               @default(1) @map("interval_days")
  personalNote    String?           @db.Text @map("personal_note")
  isFavorite      Boolean           @default(false) @map("is_favorite")
  updatedAt       DateTime          @default(now()) @updatedAt @map("updated_at")

  // Relationships
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  word        Word        @relation(fields: [wordId], references: [id], onDelete: Cascade)
  wordMeaning WordMeaning @relation(fields: [wordMeaningId], references: [id], onDelete: Cascade)

  @@unique([userId, wordId, wordMeaningId], name: "unique_user_word_meaning")
  @@map("user_words")
  @@index([nextReviewAt], map: "idx_next_review_global")
  @@index([userId, nextReviewAt, status], map: "idx_user_next_review")
  @@index([userId, status], map: "idx_user_status")
  @@index([userId, wordMeaningId, status], map: "idx_user_word_meaning")
  @@index([wordMeaningId], map: "idx_word_meaning")
  @@index([wordId], map: "word_id")
}

enum Provider {
  google
}

enum Role {
  user
  admin
  teacher
}

enum Status {
  active
  banned
  pending
}

enum LearningStatus {
  new
  learning
  familiar
  mastered
  forgotten
}
